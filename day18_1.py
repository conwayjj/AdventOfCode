from collections import defaultdict
import string

startMap = "########################\n" + \
           "#...............b.C.D.f#\n" + \
           "#.######################\n" + \
           "#.....@.a.B.c.d.A.e.F.g#\n" + \
           "########################\n"

startMap =  "#################\n" + \
            "#i.G..c...e..H.p#\n" + \
            "########.########\n" + \
            "#j.A..b...f..D.o#\n" + \
            "########@########\n" + \
            "#k.E..a...g..B.n#\n" + \
            "########.########\n" + \
            "#l.F..d...h..C.m#\n" + \
            "#################\n"

startMap = "#################################################################################\n" + \
"#.#.........#...#....r#.......#...#.....#.....#...........#.......#......c......#\n" + \
"#X#.#####.#.#.#.#.###.#####.#.#.#.#.###.#.###.#.#######Q###.#.###.#.#####.###.#.#\n" + \
"#...#.....#...#...#.#.....#.#...#.....#.#.#...#.#.....#.....#.#.#.#.#...#.#.#.#.#\n" + \
"#.###.#############.#####.#.###########.#.#.#####.###.#.#####.#.#.###F#.#.#.#.###\n" + \
"#...#.#j......#.......P.#.#.#.......#...#.#.....#...#.#.#.....#...#...#.#...#...#\n" + \
"###.#.#.###.#.#.#######.#.###.#####.#.#.#.#####.###.#.###.#####.###.###.#######.#\n" + \
"#...#.#...#.#.#.......#.#.....#...#...#.#.....#.#...#...#.#...#.#...#...#.....M.#\n" + \
"#.###.#.###.#.#######.#.#######.#.#####.#.###.#.#.#####.#.#.###.#.#####.#.#######\n" + \
"#.#...#.#...#.#.....#.#.........#.......#.#.#.#...#.......#.....#.....#.#...#...#\n" + \
"#.#.#####.###.#.#.###.###################.#.#.###.#############.#.###.#.###.#.#.#\n" + \
"#.#...#...#...#.#...#.#...#.......#.....#...#.#...#.....#.....#.#...#.#...#...#.#\n" + \
"#.###.#.#####.#.###.#.#.#.#.#####.#.#.#####.#.#####.###.#.###.#.###.#.###.#.###.#\n" + \
"#...#.#..g..#.#.#...#.L.#.#.#..n#.#.#...#...#.....#.#..i#.#...#...#.#.#.#.#.#...#\n" + \
"#####.#####.###.#.#.#####.#.#.#.#.#####.#####.###.#.#.###.#.#####.###.#.#.#.#.###\n" + \
"#.....#...#.....#.#.#.......#.#.#...#...#...#...#...#.....#...#...#...#.#.#.#...#\n" + \
"#D#####.#.#######.###.#######.#.###.#.#.#.#.#############.###.#.###U###.#A#####.#\n" + \
"#.......#.#.H...#.....#...E...#...#...#.#.#...#.........#...#.#...#.#...........#\n" + \
"#.#######.#.###.#######.#########.#####.#.###.#.#######.#.###.###.#.###########.#\n" + \
"#.#.....#.#.#.#e........#.....N...#...#.#.#.....#.....#.#.#...#...#...#.......#y#\n" + \
"#.###.#.#.#.#.#########.#.#########.###.#.#######.###.#.###.#####.#.#.#.#####.#.#\n" + \
"#...#.#.#.#.#.....#.O.#.#.#.......#.....#.#...#.....#....z#.#...#.#.#.#.#...#.#.#\n" + \
"###.#.###.#.#.###.#.#####.#.#####.#.#####.#.#.###########.#.###.#.#.#.#.###.#.#.#\n" + \
"#.....#.V.#.#.#...#......o#.#.....#.#...#...#.T.......#.......#.#.#.#.......#.#.#\n" + \
"#######.###.#.#.#############.#####.#.#.#.###########.#########.#.###########.#.#\n" + \
"#.....#...#...#..b#...#.......#.....#.#.#.#.....#...#.........#.#.......#.....#.#\n" + \
"#.###.###.#######.#.#.#####.###.#####.###.#.#####.#.###.#####.#.#######.#.#######\n" + \
"#.#.#.#...#.....#...#...#...#...#.......#.#.#.....#...#.....#.#.......#.#.......#\n" + \
"#.#.#.#.#.#.###.#######.#.###.#########.#.#.#.#######.#####S#.#######.#.#.#####.#\n" + \
"#u#...#.#.#...#.......#.#.....#.......#.#.#.#...#...#.....#.#.....#...#.#.#.#..v#\n" + \
"#.###.#.#.###.#####.#.#.###.###.#####.#.#.#.###.#.#.#####.#######.#.###.#.#.#.#.#\n" + \
"#...#...#...#.#...#.#.#...#...#.#.#...#.#.....#.#.#.#.....#.......#.#.#.#...#.#.#\n" + \
"###.###W#####.#.###.#####.###.#.#.#.###.#.#####.#.#.#####.#.#######.#.#.###.#.###\n" + \
"#...#...#.......#...#...#.#.#...#...#...#.#.....#.#.....#...#.......#.#..d#.#...#\n" + \
"#.#######.#######.###.#.#.#.#####.###.#.#.#.#####.#####.#####.#######.###.#.###.#\n" + \
"#.......#a..#.#.Y.#...#...#.....#.....#.#.#.....#.....#...#...#...#.....#.#.#...#\n" + \
"#.#####.###.#.#.#.#.#######.#.#.#######.#.#####.###.#####.#.###.###.###.#.#.#.#.#\n" + \
"#.....#...#.#.#.#.#...#.#...#.#.#.......#.#...#.....#.....#.#.....#...#.#.#.#.#.#\n" + \
"#####.#.###.#.#.#####.#.#.###.###.#######.###.#######.#####.#.###.###.#.#.###.#.#\n" + \
"#....f#.......#....m..#.....#.......................#.......#...#.....#.......#.#\n" + \
"#######################################.@.#######################################\n" + \
"#...#.....#...#...#.#.......#.....#...........#.....#.#.......#...........#.....#\n" + \
"#.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#####.#.###.###.#.#.#.#####.#.#######.#.###.#.#\n" + \
"#.#...#.#...#.#.#...#.#...#...#.........#...#...#.#...#.#...#.#.#.#...#.#.#...#.#\n" + \
"#######.#####.#.###.#.###.#############.###.###.#.###.#.#.###.#.#.#.#.#.#.#.###.#\n" + \
"#.....#.#.......#...#s#.#.#.........#...#...#...#...#.#.#.#...#...#.#...#...#.#.#\n" + \
"#.###.#.#############.#.#.#.#######.#.###.#####.#.#.###.#.#.#####.#.#########.#.#\n" + \
"#...#...#...............#.#.#.#.....#.#.#.....#t#.#...#.#.#.#.....#...#.......#.#\n" + \
"#.#.#####.###############.#.#.#.#####.#.#.###.#.#####.#.#.#.#########.#.#######.#\n" + \
"#.#.#...#.#.....#...#...#.....#.#...#.#.#.#.#.#.#.....#...#...#.......#.........#\n" + \
"#.#.#.#.#.#.###Z#.###.#.###.###.#.###.#.#.#.#.#.#.###.###.###.#.#######.#####.###\n" + \
"#.#.#.#.#...#.....#...#...#.#...#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#...#\n" + \
"###.#.#.#####.#####.#####.###.###.#.###.#.#.#.#########.###.#.#.#.###.#.#.#.###.#\n" + \
"#...#.#.....#.#.#...#...#.....#.........#...#...........#...#.#.#...#...#.#.#...#\n" + \
"#.###.#.#####.#.#.###.#.###.###############.#############.###.#####.#####.#.###.#\n" + \
"#.#...#....k....#.#...#.....#.......#...#.#.......#.....#...#...K.#.#.....#...#.#\n" + \
"#.#.#############.#####.#####.#####.#.#.#.#######.#.###.###.#####.#.#.#######.#.#\n" + \
"#...#.........#...#...#.....#...#.#...#.#.......#...#.........#...#.#.#.....#.#.#\n" + \
"#####.#######.#.###.#.#########.#.#####.#.#.###.#.###########.#.###.#.#.#####.#.#\n" + \
"#.....#.........#...#.#.........#...#...#.#...#.#.#.......#...#...#...#...#...#.#\n" + \
"#.###############B###.#.###########.#.#######.###.#.#####.#####.#.#.#####.#.###.#\n" + \
"#.....#.....#...#...#h#...........#.....#.....#...#.#...#.....#.#.#.....#.#...#w#\n" + \
"#.###.#.###.#.#.###.#####.#######.#####.#.#####.###.#.#.#########.#####.#.###.###\n" + \
"#...#...#...#.#...#.....#.......#...#.#.#.#.....#.#...#...#.....#...#.......#...#\n" + \
"#########.###.###.#####.#####.#####.#.#.#.#.#####.#######.#.###.###.#.#########.#\n" + \
"#.....#...#.....#.....#...#...#.....#.#.#...#.......#...#.#.#.......#...#.....#.#\n" + \
"#.###.#.###.#####.#######.#.###.#####.#.#.#####.#####.#.#.#.#############.###G#.#\n" + \
"#...#...#...#...#.......#.#...#.#...#...#.....#.....#.#...#.......#.......#.#...#\n" + \
"###.#####.###.#.###.###.#.#####.###.#.#######.#####.#.###########.#.#######.###.#\n" + \
"#...#.......#.#...#.#...#.#.....#...#...#...#.....#.#.......#...#.#.#.........#.#\n" + \
"#.###.#######.###.#.#.###.#.#####.#####.#.#.#####.#.#######.#.#.#.#.#.###.#####.#\n" + \
"#.....#...#...#.#.#.#...#.#.#...#.......#.#.......#...#...#...#...#.#.#.#.......#\n" + \
"#.#######.#.###.#.#####.#.#C#.#.#.#######.#########.###.#.#########.#.#.#########\n" + \
"#.......#.#...#.....R...#...#.#.#.#.....#.#.......#...#.#.....#.....#.#.........#\n" + \
"#######.#.###.###############.#.#.###.#.#.#.#####.#.#.#.#.###.#.#.###.###.#####.#\n" + \
"#.....#.#...#...#...........#.#.#.....#.#.#.....#...#..p#.#...#.#.#...#...#...#.#\n" + \
"#.#####.#.#.###.#.#########.#.#.#######.#.###.###########.###.###.#.###.#####.#.#\n" + \
"#.....#.#.#.#q#...#.....#.#.#.#.......#.#.#...#.....#...#...#...#.#...#.#x....#.#\n" + \
"#.###.#.#.#.#.#######.#.#.#.#.###.#####.#.#####.###.#.#I###.###.#.###.#.#.#####.#\n" + \
"#...#...J.#...........#...#.....#.......#.......#.....#..l..#.....#.....#.......#\n" + \
"#################################################################################\n"

mapSize = len(startMap)

# build GATE List
gates = []
for char in startMap:
    if char in string.ascii_uppercase:
        gates.append(char)
keys = []
for char in startMap:
    if char in string.ascii_lowercase:
        keys.append(char)

NUM_GATES = len(gates)
NUM_KEYS = len(keys)

yO = startMap.find('\n')+1

MOVES = (-1,1,yO,-yO)

hist = defaultdict(lambda : defaultdict( lambda :defaultdict(int)))

startPos = startMap.find('@')
print(startPos,gates)

locations = []
locations.append((startPos,[],[],startMap))

def branch(location, steps):
    global hist
    loc = location[0]
    keys = location[1]
    gates = location[2]
    curMap = location[3]
    retLocs = []
    for move in MOVES:
        newLoc = loc + move
        newKeys = keys.copy()
        newGates = gates.copy()
        if newLoc < mapSize:
            if curMap[newLoc] in ('#','\n'):
                continue
            elif curMap[newLoc] in string.ascii_lowercase:
                if curMap[newLoc] not in newKeys:
                    newKeys.append(curMap[newLoc])
                    newKeys.sort()
            elif curMap[newLoc] in string.ascii_uppercase:
                #print("NEED KEY:", curMap[newLoc].lower(), newKeys)
                if curMap[newLoc].lower() not in newKeys:
                    continue
                else:
                    if curMap[newLoc] not in newGates:
                        newGates.append(curMap[newLoc])
                        newGates.sort()
            newMap = curMap[:newLoc] + '@' + curMap[newLoc + 1:]
            newMap = newMap[:loc] + '.' + newMap[loc + 1:]
            if hist[newLoc][str(newKeys)][str(newGates)] == 0:
                #print(newMap,newLoc, newKeys, newGates)
                hist[newLoc][str(newKeys)][str(newGates)] = steps
                if len(newKeys) == NUM_KEYS:
                    print("WINNER: ", steps)
                else:
                    retLocs.append((newLoc,newKeys,newGates,newMap))
    return retLocs
                
            

steps = 0
while len(locations) > 0:
    print("Steps:", steps, "TREE SIZE:",len(locations))
    toAppend = []
    toRemove = []
    steps += 1
    for location in locations:
        newLocations = branch(location, steps)
        for newLoc in newLocations:
            toAppend.append(newLoc)
        toRemove.append(location)
    for rLoc in toRemove:
        locations.remove(rLoc)
    for aLoc in toAppend:
        locations.append(aLoc)
